security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Routes d'authentification (pas de JWT requis)
        auth:
            pattern: ^/api/(login|register|admin/register|admin/login|forgot-password|reset-password)$
            stateless: true
            security: false

        api:
            pattern: ^/(categories|products|services|subcategories|newsletters|quizzquestion|users|admin|site-content|notifications)
            stateless: true # important pour API, pas de session
            provider: app_user_provider
            jwt: ~

        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security.html#switch_user
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/register$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/admin/register$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/admin/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/forgot-password$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/reset-password$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/auth/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Public read-only access for landing page
        - {
              path: ^/(categories|products|services|subcategories)(/.*)?$,
              roles: PUBLIC_ACCESS,
              methods: [GET],
          }
        - { path: ^/quizzquestion(/.*)?$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/site-content(/.*)?$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/subscribe$, roles: PUBLIC_ACCESS, methods: [POST] }
        - { path: ^/services/featured$, roles: PUBLIC_ACCESS, methods: [GET] }
        - {
              path: ^/services/featured/reorder$,
              roles: ROLE_ADMIN,
              methods: [POST],
          }
        - { path: ^/services/reorder$, roles: ROLE_ADMIN, methods: [POST] }
        - { path: ^/products/reorder$, roles: ROLE_ADMIN, methods: [POST] }
        # Admin dashboard
        - { path: ^/admin$, roles: ROLE_ADMIN }
        - { path: ^/notifications, roles: ROLE_ADMIN }
        # General API access for authenticated users (non-GET methods only)
        - {
              path: ^/(categories|products|services|subcategories|newsletters|quizzquestion|users),
              roles: IS_AUTHENTICATED_FULLY,
              methods: [POST, PUT, DELETE, PATCH],
          }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
